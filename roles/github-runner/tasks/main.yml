# Following steps need to be run manually
# sudo curl -L -o /etc/yum.repos.d/gh-cli.repo https://cli.github.com/packages/rpm/gh-cli.repo
# sudo dnf install gh -y
# gh auth login -s admin:org

# - name: Set a hostname
#   ansible.builtin.hostname:
#     name: github-runner

---
- name: Setup GitHub Runner
  hosts: github_runner
  become: yes
  vars:
    org_name: "Batch02-2025"
    runner_name: "myrunner"
    runner_group: "Default"
    runner_labels: "rhel"
    runner_dir: "/actions-runner"
    runner_user: "grunner"
    repo_url: "https://github.com/Batch02-2025/tools-automation-code"
    runner_version: "2.328.0"

  tasks:

    - name: Ensure runner user exists (non-sudo)
      ansible.builtin.user:
        name: "{{ runner_user }}"
        shell: /bin/bash
        create_home: yes

    - name: Create runner directory
      ansible.builtin.file:
        path: "{{ runner_dir }}"
        state: directory
        owner: "{{ runner_user }}"
        group: "{{ runner_user }}"
        mode: '0755'

    - name: Install GitHub runner dependencies
      ansible.builtin.dnf:
        name:
          - libicu
          - curl
          - tar
          - xz
          - zlib
          - glibc
          - jq
          - git
        state: present

    - name: Download and extract GitHub Runner
      ansible.builtin.unarchive:
        src: "https://github.com/actions/runner/releases/download/v{{ runner_version }}/actions-runner-linux-x64-{{ runner_version }}.tar.gz"
        dest: "{{ runner_dir }}"
        remote_src: yes
        owner: "{{ runner_user }}"
        group: "{{ runner_user }}"

    - name: Grab registration token from GitHub (org level)
      ansible.builtin.shell: |
        gh api --method POST \
          -H 'Accept: application/vnd.github+json' \
          -H 'X-GitHub-Api-Version: 2022-11-28' \
          orgs/{{ org_name }}/actions/runners/registration-token | jq -r .token
      register: runner_token
      become_user: ec2-user

    - name: Check if runner already configured
      ansible.builtin.stat:
        path: "{{ runner_dir }}/.runner"
      register: runner_config

    - name: Configure GitHub Runner
      ansible.builtin.shell: >
        ./config.sh
        --url https://github.com/{{ org_name }}
        --token {{ runner_token.stdout }}
        --runnergroup "{{ runner_group }}"
        --name "{{ runner_name }}"
        --labels "{{ runner_labels }}"
        --work _work
        --replace
        --unattended
      args:
        chdir: "{{ runner_dir }}"
      become_user: "{{ runner_user }}"
      when: not runner_config.stat.exists

    - name: Install and start GitHub Runner service (as grunner)
      ansible.builtin.shell: |
        ./svc.sh install
        ./svc.sh start
      args:
        chdir: "{{ runner_dir }}"
      become_user: "{{ runner_user }}"

    - name: Ensure service file runs as grunner (in case svc.sh picked ec2-user)
      ansible.builtin.replace:
        path: "/etc/systemd/system/actions.runner.{{ org_name }}*.{{ runner_name }}.service"
        regexp: '^User=.*'
        replace: "User={{ runner_user }}"
      become: yes
      ignore_errors: yes  # in case the glob doesn't match yet

    - name: Reload and restart runner service
      ansible.builtin.shell: |
        systemctl daemon-reload
        systemctl restart "actions.runner.{{ org_name }}*.{{ runner_name }}.service"
      become: yes
      ignore_errors: yes

    - name: Ensure runner service is enabled at boot
      ansible.builtin.systemd:
        name: "actions.runner.{{ org_name }}*.{{ runner_name }}.service"
        enabled: true
        state: started
      become: yes
      ignore_errors: yes

#- name: Add github Runner User
#  ansible.builtin.user:
#    name: grunner
#
#- name: Create a Directory
#  ansible.builtin.file:
#    path: /actions-runner
#    state: directory
#    owner: grunner
#    group: grunner
#
#- name: Extract and download Github-runner
#  ansible.builtin.unarchive:
#    src: https://github.com/actions/runner/releases/download/v2.328.0/actions-runner-linux-x64-2.328.0.tar.gz
#    dest: "/actions-runner"
#    remote_src: yes
#    owner: grunner
#    group: grunner
#
#- name: Grab a Token
#  ansible.builtin.shell: |
#    gh api --method POST -H 'Accept: application/vnd.github+json' -H 'X-GitHub-Api-Version: 2022-11-28' orgs/Batch02-2025/actions/runners/registration-token | jq .token
#  register: token
#  become_user: ec2-user # fetch this token using ec2-user as its used for gh to login to github.
#
#- name: Install GitHub runner dependencies
#  ansible.builtin.dnf:
#    name:
#      - libicu
#      - curl
#      - tar
#      - xz
#      - zlib
#      - glibc
#    state: present
#
#- name: Get the runner count
#  ansible.builtin.shell:
#    cmd: >
#      gh api --method GET
#      -H 'Accept: application/vnd.github+json'
#      -H 'X-GitHub-Api-Version: 2022-11-28'
#      orgs/Batch02-2025/actions/runners
#      | jq '.runners | length'
#  register: runner_count
#  become_user: ec2-user
#
#- name: Get the runner status
#  ansible.builtin.shell:
#    cmd: >
#      gh api
#      -H 'Accept: application/vnd.github+json'
#      -H 'X-GitHub-Api-Version: 2022-11-28'
#      orgs/Batch02-2025/actions/runners
#      | jq '.runners[] | select(.name == "myrunner") | .status'
#      | xargs
#  register: runner_status
#  become_user: ec2-user
#
#- name: Check if runner is already configured locally
#  ansible.builtin.stat:
#    path: /actions-runner/.runner
#  register: runner_config
#
#- name: Configure the GitHub Runner
#  ansible.builtin.shell:
#    cmd: >
#      ./config.sh
#      --url https://github.com/Batch02-2025/tools-automation-code
#      --token {{ token.stdout }}
#      --runnergroup Default
#      --name myrunner
#      --labels rhel
#      --work _work
#      --replace
#      --unattended
#  args:
#    chdir: /actions-runner
#  become: true
#  become_user: grunner
#  when:
#    - not runner_config.stat.exists
#    - runner_count.stdout == "0" or runner_status.stdout == "offline"
#
#
#- name: Update the path
#  ansible.builtin.copy:
#    src: path
#    dest: /actions-runner/.path
#    owner: grunner
#    group: grunner
#    mode: '0644'
#  become: yes
#  become_user: grunner
#  when: runner_count.stdout == "0" or runner_status.stdout == "offline"
#
#
#- name: Install Github Service
#  ansible.builtin.shell: ./svc.sh install; ./svc.sh start
#  args:
#    chdir: /actions-runner
#  become: true
#  become_user: grunner
#  when: runner_count.stdout == "0" or runner_status.stdout == "offline"
#
#- name: Ensure runner service runs as grunner
#  ansible.builtin.replace:
#    path: /etc/systemd/system/actions.runner.Batch02-2025-tools-automation-code.myrunner.service
#    regexp: '^User=.*'
#    replace: 'User=grunner'
#  become: true
#
#- name: Reload systemd and restart runner
#  ansible.builtin.shell: |
#    systemctl daemon-reload
#    systemctl restart actions.runner.Batch02-2025-tools-automation-code.myrunner.service
#  become: true

- name: Download the Terraform Repo File
  ansible.builtin.get_url:
    url: https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
    dest: /etc/yum.repos.d/hashicorp.repo

- name: Install Terraform
  ansible.builtin.yum:
    name: terraform
    state: present

- name: Install python3.11-pip
  ansible.builtin.yum:
    name: python3.11-pip
    state: present

- name: Install Ansible using pip3.11
  ansible.builtin.pip:
    name: ansible
    executable: pip3.11



